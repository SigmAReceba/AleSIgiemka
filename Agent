Clear-Host

Write-Host @"
────────────────────────────────
───────────────██████████───────
──────────────████████████──────
──────────────██────────██──────
──────────────██▄▄▄▄▄▄▄▄▄█──────
──────────────██▀███─███▀█──────
█─────────────▀█────────█▀──────
██──────────────────█───────────
─█──────────────██──────────────
█▄────────────████─██──████
─▄███████████████──██──██████ ──
────█████████████──██──█████████
─────────────████──██─█████──███
──────────────███──██─█████──███
──────────────███─────█████████
──────────────██─────████████▀
────────────────██████████
────────────────██████████
─────────────────████████
──────────────────██████████▄▄
────────────────────█████████▀
─────────────────────████──███
────────────────────▄████▄──██
────────────────────██████───▀
────────────────────▀▄▄▄▄▀
"@ -ForegroundColor Red
Write-Host ""
Write-Host "  AGENT - " -ForegroundColor Blue -NoNewline
Write-Host -ForegroundColor Red "AGENT"

Write-Host ""

# Sprawdzenie czy skrypt jest uruchamiany jako administrator
function Test-Admin {
    $currentUser = New-Object Security.Principal.WindowsPrincipal $([Security.Principal.WindowsIdentity]::GetCurrent())
    $currentUser.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)
}

if (!(Test-Admin)) {
    Write-Warning "Please Run This Script as Administrator."
    Start-Sleep 10
    Exit
}

Start-Sleep -Seconds 3
Clear-Host

$host.privatedata.ProgressForegroundColor = "red"
$host.privatedata.ProgressBackgroundColor = "black"

# Wykonaj komendę fsutil usn readJournal i przekieruj wynik do pliku Receba.txt
try {
    $journalResult = fsutil usn readJournal C: CSV >> "Receba.txt"
    Write-Host "Success: 'fsutil usn readJournal' command executed successfully." -ForegroundColor Green
    Write-Host "File 'Receba.txt' created." -ForegroundColor Green
} catch {
    Write-Host "Error: failed to execute 'fsutil usn readJournal' command." -ForegroundColor Red
}

# Sprawdź, czy plik 'Receba.txt' został utworzony
if (Test-Path "Receba.txt") {
    Write-Host "File 'Receba.txt' exists." -ForegroundColor Yellow
} else {
    Write-Host "Error: 'Receba.txt' not found." -ForegroundColor Red
}

# Wykonaj komendę findstr na pliku Receba.txt w poszukiwaniu linii zawierających ".jar" i zapisz wynik do pliku jarki.txt
try {
    $findJarResult = fsutil usn readJournal C: CSV | findstr /i /c:.jar >> "jarki.txt"
    Write-Host "Success: '.jar' files found and saved to 'jarki.txt'." -ForegroundColor Green
} catch {
    Write-Host "Error: failed to find and save '.jar' files to 'jarki.txt'." -ForegroundColor Red
}

# Sprawdź, czy plik 'jarki.txt' został utworzony
if (Test-Path "jarki.txt") {
    Write-Host "File 'jarki.txt' exists." -ForegroundColor Yellow
} else {
    Write-Host "Error: 'jarki.txt' not found." -ForegroundColor Red
}

# Pobierz identyfikator pliku od użytkownika
function Get-FileID {
    $FileID = Read-Host "Enter the File ID:"
    if ($FileID -match '^[0-9A-Fa-f]{1,16}$') {
        return $FileID
    } else {
        Write-Host "Invalid File ID. Please enter a valid hexadecimal value (up to 16 characters)." -ForegroundColor Red
        return $null
    }
}

# Wykonaj komendę fsutil file queryFileNameById z podanym identyfikatorem pliku
function Query-FileName {
    param(
        [string]$FileID
    )
    try {
        $queryResult = fsutil file queryFileNameById C:\ $FileID
        Write-Host "Path to the file with File ID '$FileID':" -ForegroundColor Green
        Write-Host $queryResult -ForegroundColor Cyan
    } catch {
        Write-Host "Error: failed to query file name by ID '$FileID'." -ForegroundColor Red
    }
}

# Pętla umożliwiająca wielokrotne wykonywanie komendy fsutil file queryFileNameById C:\
while ($true) {
    $input = Read-Host "Do you want to query another file name? (Y/N)"
    if ($input -eq "N") {
        break
    } elseif ($input -eq "Y") {
        $FileID = Get-FileID
        if ($FileID -ne $null) {
            Query-FileName $FileID
        }
    } else {
        Write-Host "Invalid input. Please enter 'Y' or 'N'."
    }
}
